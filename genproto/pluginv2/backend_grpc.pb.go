// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.5
// source: backend.proto

package pluginv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Resource_CallResource_FullMethodName = "/pluginv2.Resource/CallResource"
)

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	CallResource(ctx context.Context, in *CallResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CallResourceResponse], error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) CallResource(ctx context.Context, in *CallResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CallResourceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Resource_ServiceDesc.Streams[0], Resource_CallResource_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CallResourceRequest, CallResourceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Resource_CallResourceClient = grpc.ServerStreamingClient[CallResourceResponse]

// ResourceServer is the server API for Resource service.
// All implementations should embed UnimplementedResourceServer
// for forward compatibility.
type ResourceServer interface {
	CallResource(*CallResourceRequest, grpc.ServerStreamingServer[CallResourceResponse]) error
}

// UnimplementedResourceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServer struct{}

func (UnimplementedResourceServer) CallResource(*CallResourceRequest, grpc.ServerStreamingServer[CallResourceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CallResource not implemented")
}
func (UnimplementedResourceServer) testEmbeddedByValue() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_CallResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).CallResource(m, &grpc.GenericServerStream[CallResourceRequest, CallResourceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Resource_CallResourceServer = grpc.ServerStreamingServer[CallResourceResponse]

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallResource",
			Handler:       _Resource_CallResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

const (
	PluginInfo_Get_FullMethodName         = "/pluginv2.PluginInfo/Get"
	PluginInfo_CheckHealth_FullMethodName = "/pluginv2.PluginInfo/CheckHealth"
)

// PluginInfoClient is the client API for PluginInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 插件信息
type PluginInfoClient interface {
	Get(ctx context.Context, in *PluginInfoGetReq, opts ...grpc.CallOption) (*PluginInfoGetRes, error)
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
}

type pluginInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginInfoClient(cc grpc.ClientConnInterface) PluginInfoClient {
	return &pluginInfoClient{cc}
}

func (c *pluginInfoClient) Get(ctx context.Context, in *PluginInfoGetReq, opts ...grpc.CallOption) (*PluginInfoGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginInfoGetRes)
	err := c.cc.Invoke(ctx, PluginInfo_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginInfoClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckHealthResponse)
	err := c.cc.Invoke(ctx, PluginInfo_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginInfoServer is the server API for PluginInfo service.
// All implementations should embed UnimplementedPluginInfoServer
// for forward compatibility.
//
// 插件信息
type PluginInfoServer interface {
	Get(context.Context, *PluginInfoGetReq) (*PluginInfoGetRes, error)
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
}

// UnimplementedPluginInfoServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginInfoServer struct{}

func (UnimplementedPluginInfoServer) Get(context.Context, *PluginInfoGetReq) (*PluginInfoGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPluginInfoServer) CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedPluginInfoServer) testEmbeddedByValue() {}

// UnsafePluginInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginInfoServer will
// result in compilation errors.
type UnsafePluginInfoServer interface {
	mustEmbedUnimplementedPluginInfoServer()
}

func RegisterPluginInfoServer(s grpc.ServiceRegistrar, srv PluginInfoServer) {
	// If the following call pancis, it indicates UnimplementedPluginInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginInfo_ServiceDesc, srv)
}

func _PluginInfo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfoGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginInfoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginInfo_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginInfoServer).Get(ctx, req.(*PluginInfoGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginInfo_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginInfoServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginInfo_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginInfoServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginInfo_ServiceDesc is the grpc.ServiceDesc for PluginInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.PluginInfo",
	HandlerType: (*PluginInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PluginInfo_Get_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _PluginInfo_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

const (
	Live_Pub2Channel_FullMethodName = "/pluginv2.Live/Pub2Channel"
)

// LiveClient is the client API for Live service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveClient interface {
	Pub2Channel(ctx context.Context, in *Pub2ChannelRequest, opts ...grpc.CallOption) (*Pub2ChannelResponse, error)
}

type liveClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveClient(cc grpc.ClientConnInterface) LiveClient {
	return &liveClient{cc}
}

func (c *liveClient) Pub2Channel(ctx context.Context, in *Pub2ChannelRequest, opts ...grpc.CallOption) (*Pub2ChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pub2ChannelResponse)
	err := c.cc.Invoke(ctx, Live_Pub2Channel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServer is the server API for Live service.
// All implementations should embed UnimplementedLiveServer
// for forward compatibility.
type LiveServer interface {
	Pub2Channel(context.Context, *Pub2ChannelRequest) (*Pub2ChannelResponse, error)
}

// UnimplementedLiveServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveServer struct{}

func (UnimplementedLiveServer) Pub2Channel(context.Context, *Pub2ChannelRequest) (*Pub2ChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub2Channel not implemented")
}
func (UnimplementedLiveServer) testEmbeddedByValue() {}

// UnsafeLiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServer will
// result in compilation errors.
type UnsafeLiveServer interface {
	mustEmbedUnimplementedLiveServer()
}

func RegisterLiveServer(s grpc.ServiceRegistrar, srv LiveServer) {
	// If the following call pancis, it indicates UnimplementedLiveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Live_ServiceDesc, srv)
}

func _Live_Pub2Channel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pub2ChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).Pub2Channel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_Pub2Channel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).Pub2Channel(ctx, req.(*Pub2ChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Live_ServiceDesc is the grpc.ServiceDesc for Live service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Live_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Live",
	HandlerType: (*LiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub2Channel",
			Handler:    _Live_Pub2Channel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
